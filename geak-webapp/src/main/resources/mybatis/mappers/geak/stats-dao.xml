<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.xsocket.geak.dao.StatsDao">

  <cache />

  <resultMap id="resultRevenue" type="com.github.xsocket.geak.entity.Stats">
    <!-- 基本收入 -->
    <result property="companyId"      column="company_id"     javaType="Integer" jdbcType="INTEGER" />
    <result property="companyName"    column="company_name"   javaType="String"  jdbcType="VARCHAR" />
    <result property="totalIncome"    column="total_income"   javaType="Integer" jdbcType="INTEGER" />
    <result property="totalCount"     column="total_count"    javaType="Integer"  jdbcType="INTEGER" />
    <result property="totalCustomer"  column="total_customer" javaType="Integer"  jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="resultStatus" type="com.github.xsocket.geak.entity.Stats">
    <!-- 基本收入 -->
    <result property="companyId"      column="company_id"     javaType="Integer" jdbcType="INTEGER" />
    <result property="companyName"    column="company_name"   javaType="String"  jdbcType="VARCHAR" />
    <result property="state"          column="state"          javaType="String" jdbcType="VARCHAR" />
    <result property="totalCount"     column="total_count"    javaType="Integer"  jdbcType="INTEGER" />
    <result property="totalIncome"    column="total_income"   javaType="Integer" jdbcType="INTEGER" />
    <result property="totalCustomer"  column="total_customer" javaType="Integer"  jdbcType="INTEGER" />
  </resultMap>
  
  
  <!-- 每日凌晨5点结算， -->
  <select id="selectRevenue" resultMap="com.github.xsocket.geak.dao.StatsDao.resultRevenue">
    SELECT
        c.id AS company_id,
        max(c.name) AS company_name,
        sum(total_price)  as total_income,
        count(*) as total_count,
        sum(customer_count) as total_customer
    FROM geak_order o JOIN geak_company c ON o.company_id = c.id
    WHERE o.state <![CDATA[<>]]> 'NEW' AND o.state <![CDATA[<>]]> 'CANCELLED'
      <if test="start != null">
        AND TO_DAYS(DATE_SUB(o.created_date,INTERVAL 5 HOUR)) >= TO_DAYS(#{start,jdbcType=TIMESTAMP})
      </if>
      <if test="end != null">
        AND TO_DAYS(DATE_SUB(o.created_date,INTERVAL 5 HOUR)) <![CDATA[<]]> TO_DAYS(DATE_ADD(#{end,jdbcType=TIMESTAMP}, INTERVAL 1 DAY))
      </if>
    GROUP BY company_id
  </select>
  
  
  <select id="selectStatus" resultMap="com.github.xsocket.geak.dao.StatsDao.resultStatus">
    SELECT
        c.id AS company_id,
        max(c.name) AS company_name,
        state,
        count(*) as total_count,
        sum(total_price) as total_income,
        sum(customer_count) as total_customer
    FROM geak_order o JOIN geak_company c ON o.company_id = c.id
    WHERE o.state <![CDATA[<>]]> 'CANCELLED'
      <if test="start != null">
        AND TO_DAYS(DATE_SUB(o.created_date,INTERVAL 5 HOUR)) >= TO_DAYS(#{start,jdbcType=TIMESTAMP})
      </if>
      <if test="end != null">
        AND TO_DAYS(DATE_SUB(o.created_date,INTERVAL 5 HOUR)) <![CDATA[<]]> TO_DAYS(DATE_ADD(#{end,jdbcType=TIMESTAMP}, INTERVAL 1 DAY))
      </if>
    GROUP BY company_id, state

    UNION
    
    SELECT
      c.id AS company_id,
      max(c.name) AS company_name,
      'APPOINTMENT' as state,
      count(*) as total_count,
      0 as total_income,
      sum(customer_count) as total_customer
    FROM geak_appointment o JOIN geak_company c ON o.company_id = c.id
    where state = 'NEW'
      <if test="start != null">
        AND TO_DAYS(DATE_SUB(o.appointment_date,INTERVAL 5 HOUR)) >= TO_DAYS(#{start,jdbcType=TIMESTAMP})
      </if>
      <if test="end != null">
        AND TO_DAYS(DATE_SUB(o.appointment_date,INTERVAL 5 HOUR)) <![CDATA[<]]> TO_DAYS(DATE_ADD(#{end,jdbcType=TIMESTAMP}, INTERVAL 1 DAY))
      </if>
    GROUP BY company_id
  </select>
  
  
</mapper>